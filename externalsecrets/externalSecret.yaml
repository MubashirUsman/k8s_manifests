# The External Secrets Operator runs as a deployment in your cluster with elevated privileges. 
# It will create/read/update secrets in all namespaces and has access to secrets stored in some external API.
# External Secret fetches secrets from AWS and injects in K8s secrets
# ESO uses SecretStore, ClusterSecretStore, ExternalSecret to fetch and manage secrets
#  SecretStore resource provides access/authentication (access and secret access key from secrets), 
# The ExternalSecret specifies what to fetch, the SecretStore specifies how to access.SecretStore is namespaced
# 
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: secretstore-sample
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth: # This is where you provide the access key and secret access key which are stored as a kubernetes secret already
        secretRef:
          accessKeyIDSecretRef:
            name: awssm-secret
            key: access-key
          secretAccessKeySecretRef:
            name: awssm-secret
            key: secret-access-key
---
# An ExternalSecret declares what data to fetch. It has a reference to a SecretStore (using secretStoreRef) which knows how to access that data.
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: example
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: secretstore-sample
    kind: SecretStore
  target:
    name: secret-to-be-created
    creationPolicy: Owner
  data:
  - secretKey: secret-key-to-be-managed
    remoteRef:
      key: provider-key
      version: provider-key-version
      property: provider-key-property
  dataFrom:
  - extract:
      key: remote-key-in-the-provider

# Example
# Json information stored in secret manager
{
  "name": {"first": "Tom", "last": "Anderson"},
  "friends": [
    {"first": "Dale", "last": "Murphy"},
    {"first": "Roger", "last": "Craig"},
    {"first": "Jane", "last": "Murphy"}
  ]
}
---
# ExrternalSecret for fetching the above values 
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: example
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: aws-secretsmanager
    kind: SecretStore
  target:
    name: friends
    creationPolicy: Owner
    data:
    - secretKey: my_name
      remoteRef:
        key: friendslist
        property: name.first # Tom
    - secretKey: first_friend
      remoteRef:
        key: friendslist
        property: friends.1.first # Roger