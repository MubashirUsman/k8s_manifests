# A Volume represents a directory with data that is accessible across multiple containers in a Pod. 
# The volume lives even when container dies and can be consumed by any number of containers in a pod.
# 
# A volume usage entails the declaration of the volume in a Pod by specifying a “volumes” property 
# under the spec (spec.volumes) field in a Pod manifest file, followed by the volume in an array format. 
# The configuration will look like this:
spec:
 volumes:
 - name: xyz

# A volumeMount, on the other hand, entails mounting of the declared volume into a container in the same Pod.
# Volume and volumeMounts go hand in hand. You can not create a volume without mounting it or mount a volume that has not been created. 
spec:
 containers:
 - name: my-app
   image: nginx
   volumeMounts:
   - name: xyz
     mountPath: /app/config

# Ephemeral volumes have same lifetime as the Pod but persists beyond container restarts. etc emptyDir, configMap, secret 
# Durable volume outlives beyond the pod lifecycle, e.g hostPath
apiVersion: v1
kind: Pod
metadata:
  name: myapp
spec:
  containers:
  - name: my-app
    image: nginx
    ports:
    - containerPort: 8080
    volumeMounts:
    - name: my-volume
      mountPath: /app
  volumes:
  - name: my-volume
    hostPath:
      path: /mnt/vpath  #/mnt is a directory name on node's filesystem

# emptyDir volume type is created when pod starts and is deleted when pod
# terminates.
# hostPath allows the pod to mount a directory from the host node's filesystem.
# Persistant volume allows you to store data beyond the lifetime of the pod,
apiVersion: v1
kind: PersistentVolume
metadata:
  name: my-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
  - ReadWriteOnce #read-write by a single node at a time
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
  hostPath:
    path: /mnt/data

# PersistentVolumeClaim is used to access the PV
# PV can be used by multiple pods, 
# StorageClass allows PV with different capacity/performance/characteristics: 
# You can define storage profiles for different types of workloads
# Fields: provisioner, parameter, reclaimPolicy
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: standard
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
reclaimPolicy: Retain
allowVolumeExpansion: true
mountOptions:
  - debug
volumeBindingMode: Immediate
# aws-ebs storageClass type 
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: slow
provisioner: kubernetes.io/aws-ebs
parameters:
  type: io1
  iopsPerGB: "10"
  fsType: ext4